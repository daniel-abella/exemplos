EQUINOX

Fábio Nogueira de Lucena
fabio@inf.ufg.br

INTRODUÇÃO
Equinox é uma implementação da especificação OSGi R4. Extensa
informação sobre esta implementação pode ser obtida em
http://www.eclipse.org/equinox/. A especificação OSGi R4, além de
detalhes sobre a origem, motivação, parceiros e outras, podem ser
obtidas em http://osgi.org.

OSGi é uma tecnologia que oferece para Java um padrão para montagem
dinâmica de sistemas baseados em módulos. Dito de outra forma, permite
a definição de módulos, gerencia a visibilidade de APIs oferecidas
pelos módulos, gerencia dependências entre os módulos e as versões
destes. Módulos ou bundles são componentes menores e
reutilizáveis. 

Bundles podem ser instalados, iniciados, interrompidos e desinstalados
e atualizados em tempo de execução. Bundles publicam serviços
dinamicamente e podem descobrir e requisitar serviços disponibilizados
por outros bundles. Em conseqüência, serviços podem aparecer e
desaparecer em tempo de execução. Ao longo deste texto serão
demonstrados vários destes serviços.

OSGi é uma especificação, ou seja, documenta e atribui funções
precisas a tais serviços, mas não os implementa. Equinox, por outro
lado, é uma implementação desta especificação, dentre várias
disponíveis. Outras implementações open source incluem Apache Felix
(http://cwiki.apache.org/FELIX/index.html) e Knoplerfish
(http://www.knopflerfish.org/) são duas delas.

INSTALAÇÃO 
A versão mais recente do Equinox pode ser obtida em
http://download.eclipse.org/eclipse/equinox/. A implementação do
Equinox é fornecida em um único arquivo .jar, algo como
org.eclipse.osgi_3.3.0.v20070530.jar. Naturalmente, o nome deste
arquivo irá variar conforme a versão obtida. Um arquivo de nome
semelhante também existe no diretório de instalação do Eclipse e
oferece a mesma funcionalidade.

PRIMEIROS PASSOS
Para iniciar o Equinox, simplesmente execute o comando abaixo:

java -jar org.eclipse.osgi_3.3.0.v20070530.jar -console

A execução deste comando irá oferecer ao usuário a seguinte resposta:

osgi>

Isto significa que a implementação de OSGi empregada está em
execução. Ou seja, está pronta para oferecer serviços. Para obter uma
lista das opções disponíveis digite o ponto de interrogação ? seguido
de enter. Como resposta terá uma lista completa dos serviços
oferecidos. No restante do texto teremos oportunidade para
experimentar parte deles. Alguns, contudo, são amplamente empregados
e são reproduzidos abaixo:

install <url> instala um bundle obtido do url fornecido
start <bundle id ou nome> inicia o bundle indicado
stop <bundle id ou nome> interrompe a execução do bundle indicado
ss  lista o status dos bundles instalados
dig <bundle id ou nome> relata qualquer problema com o bundle indicado

Observe que as opções, boa parte delas, atuam sobre um bundle
específico. De fato, todo o trabalho oferecido por OSGi é para uso dos
bundles. Ou seja, primeiro é preciso construí-los antes de usufruir
das opções acima.

MEU PRIMEIRO BUNDLE (em três passos)

Primeiro passo: criar um bundle

Bundle é o elemento de composição de OSGi para o qual são oferecidos
serviços. O acesso a eles é obtido por meio de uma instância de
BundleContext. Uma simples classe pode obter esta referência ao
implementar a interface BundleActivator. Esta interface oferece dois
métodos: start(BundleContext contexto) e stop(BundleContext contexto).

Abaixo segue um bundle que não faz muito, exceto indicar que foi
iniciado (quando iniciado) e que foi interrompido (quando
interrompido). 

package introducao;

import org.osgi.framework.BundleActivator;
import org.osgi.framework.BundleContext;

public class MeuPrimeiroBundle implements BundleActivator {

	public void start(BundleContext context) throws Exception {
		System.out.println("Iniciado");
	}

	public void stop(BundleContext context) throws Exception {
		System.out.println("Interrompido");
	}	
}

Segundo passo: criar arquivo com meta-informações (mf)

Deverá ser produzido um arquivo mf (manifest file) contendo
informações que serão empregadas pelo OSGi. Para este exemplo segue o
arquivo abaixo.

Manifest-Version: 1.0
Bundle-ManifestVersion: 2
Bundle-Name: Introdução ao Equinox
Bundle-SymbolicName: introducao
Bundle-Version: 1.0.0
Bundle-Activator: introducao.MeuPrimeiroBundle
Bundle-Localization: plugin
Import-Package: org.osgi.framework;version="1.3.0"

Duas das linhas acima são particularmente importantes. Aquela que
descreve qual a classe empregada para a ativação do bundle
(Bundle-Activator), ou seja, a classe introducao.MeuPrimeiroBundle
(fornecida acima) e as dependências do bundle para pacotes externos
(Import-Package).

Terceiro passo: compilar e empacotar o bundle

A compilação da classe MeuPrimeiroBundle exige o arquivo jar contendo
a implementação de OSGi. O empacotamento de um bundle mínimo exige apenas a
classe compilada e o arquivo mf. Os comandos abaixo compilam e montam
o pacote pronto para uso da implementação de OSGi.

javac -d \tmp -cp org.eclipse.osgi_3.3.0.v20070530.jar MeuPrimeiroBundle.java
jar cfm mpb.jar manifes.mf -C \tmp introducao 

EXECUTANDO O BUNDLE CRIADO

Já vimos como executar o OSGi. Após obter o prompt, execute o comando
abaixo. Este comando assume que o arquivo mpb.jar está no mesmo
diretório em que o OSGi é executado.

osgi> install file:mpb.jar
Bundle id is 3

Observe o retorno indicando o id do bundle recém instalado. Este id é
uma forma de identificar o bundle recém-instalado. Outro comando útil
é fornecido abaixo.

osgi> ss
id    State      Bundle
0     ACTIVE     org.eclipse.osgi_3.3.0.v20070530
3     INSTALLED  introducao_1.0.0

Observe que ss (show status) exibe os bundles em execução e o estado
correspondente a cada um. Neste momento observa-se que, embora
instalado, o bundle de id 3, aquele de nome introducao_1.0.0, não está
ativo. Para ativá-lo execute o comando abaixo.

osgi> start 3
Iniciado

O retorno fornecido é a mensagem exibida como conseqüência da execução
do método start (veja código da classe MeuPrimeiroBundle). Observe que agora
o status foi alterado.

osgi> ss
id    State      Bundle
0     ACTIVE     org.eclipse.osgi_3.3.0.v20070530
3     ACTIVE     introducao_1.0.0

Agora, o bundle introducao_1.0.0 também está ativo. Podemos agora
interromper a execução e observar o resultado.

osgi> stop 6
Interrompido

Nenhuma surpresa, ao iterromper a execução o método stop foi
executado. Por fim, podemos desinstalar o bundle produzido com o
comando abaixo.

osgi> uninstall 6

Nenhum retorno é fornecido. Contudo, podemos consultar o status,
conforme visto acima e verificar que, de fato, a implementação de OSGi
em execução agora não mais gerencia o bundle recém-criado.

osgi> ss
0     ACTIVE     org.eclipse.osgi_3.3.0.v20070530

