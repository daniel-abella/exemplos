<?xml version="1.0" encoding="UTF-8"?>
<project name="jpa" basedir="." default="test">

	<!-- ================================================================= -->
	<!-- Projeto Testes                                                    -->
	<!-- Copyright (c) 2007 Kyriosdata (r)                                 -->
	<!-- Fábio Nogueira de Lucena (fabio@kyriosdata.com.br)                -->
	<!--                                                                   -->
	<!-- PRÉ-REQUISITOS:                                                   -->
	<!-- 1. Ambiente kad-libs-0.9 instalado (veja kyrios.sourceforge.net)  -->
	<!-- 2. Definição da variável ECLIPSE 'KAD_LIBS'                       -->
	<!-- 3. Projeto kad-libs-0.9 (acompanha kad-libs)                      -->
	<!-- ================================================================= -->

	<property environment="env" />
	<property name="kad.libs" value="${env.KAD_LIBS}" />
	<property file="${kad.libs}/kad-libs.properties" />

	<!-- ================================================================= -->
	<!-- PROPRIEDADES                                                      -->
	<!-- ================================================================= -->

	<!-- Organização do código -->
	<property name="src.dir" location="src" />
	<property name="etc.dir" location="etc" />
	<property name="build.dir" location="target" />
	<property name="test.dir" location="test" />
	<property name="test.out.dir" location="${build.dir}/tout" />
	<property name="copyright.note" value="2007" />
	<property name="version" value="0.1" />

	<!-- ================================================================= -->
	<!-- Kyrios Software(r) (dependências)                                 -->
	<!-- ================================================================= -->
	<!-- Estratégia:
	     (a) Criar variável KYRIOS_LIBS para diretório de libs do Kyrios
	     (b) Incluir todos os .jar em KYRIOS_LIBS. 
	     (c) Criar referência para todas as libs que devem estar em KYRIOS_LIBS
	     (d) Criar alvo que deposita em KYRIOS_LIBS todas aquelas necessárias
	     (e) Exige definir estrutura padrão para depositar libs do KYRIOS. 
	-->
	<path id="kyrios.classpath">
		<path location="../dominio/target/classes" />
	</path>
	
	<path id="cobertura.classpath">
		<path location="${cobertura.jar}" />
		<fileset dir="${cobertura.dir}/lib" includes="*.jar" />
	</path>
	
	<!-- ================================================================= -->
	<!-- CLASSPATH (projeto)                                               -->
	<!-- ================================================================= -->
	<path id="projeto.classpath">
		<!-- ETC (dados e outros elementos do CLASSPATH) -->
		<path location="${etc.dir}" />
				
		<!-- Código fonte instrumentado (usado pelo Cobertura) -->
		<!-- ESTA ORDEM ASSEGURA, SE EXISTIR, DO CÓDIGO INSTRUMENTADO -->
		<path location="${build.dir}/instrumented-classes"/>
		
		<!-- Código fonte -->
		<path location="${build.dir}/classes"/>
				
		<!-- Testes de unidade -->
		<path location="${build.dir}/tests"/>
		
		<!-- Kyrios Software(r) (dependências) -->
		<path refid="kyrios.classpath" />
		
		<!-- JUnit -->
		<path location="${junit.jar}" />
		
		<!-- JMock -->
		<path location="${jmock.jar}" />
		
		<!-- Cobertura (execução de código instrumentado pelo JUnit) -->
		<path refid="cobertura.classpath" />
		
	</path>

	<!-- ALVOS DE PROPÓSITO GERAL                                          -->
	<!-- ================================================================= -->
	<!-- clean   : apaga arquivos gerados                                  -->
	<!-- compile : compila fontes                                          -->
	<!-- execute : executa classe (argumento -Dclasse=<nomeClasse>)        -->
	<!-- javadoc : gera documentação do código                             -->
	<!-- ================================================================= -->

	<target name="clean" description="Apaga arquivos gerados">
		<delete dir="${build.dir}" />
	</target>

	<target name="compile" description="compila fontes">
		<mkdir dir="${build.dir}/classes" />
		<javac encoding="ISO-8859-1" srcdir="${src.dir}" destdir="${build.dir}/classes" debug="${compile.debug}">
			<classpath refid="projeto.classpath" />
		</javac>
	</target>
	
	<target name="compile-tests" depends="compile" description="compila testes">
		<mkdir dir="${build.dir}/tests" />
		<javac encoding="ISO-8859-1" srcdir="${test.dir}" destdir="${build.dir}/tests">
			<classpath refid="projeto.classpath" />
		</javac>
	</target>

	<target name="execute" depends="compile" description="executa classe (-Dclasse=nomeClasse)">
		<java classname="${classe}">
			<classpath refid="projeto.classpath" />
		</java>
	</target>
	
	<!-- javadoc (gera documentação do código -->
	<target name="javadoc" description="Generate JavaDoc API docs">
		<javadoc destdir="${build.dir}/docs/api" packagenames="com.*" encoding="ISO-8859-1" author="true" version="true" windowtitle="${webapp.name} api" doctitle="&lt;h1&gt;${webapp.name} javadocs for
                version ${webapp.version}&lt;/h1&gt;" bottom="Copyright &#169; ${copyright.year}" stylesheetfile="${build.dir}/docs/api/stylesheet.css">

			<fileset dir="${src.dir}">
				<include name="**/*.java"/>
			</fileset>

			<classpath>
				<path refid="projeto.classpath" />
			</classpath>

			<!-- SDKs -->
			<link href="http://java.sun.com/j2se/1.5/docs/api/" />
		</javadoc>
	</target>
	
	<target name="dist" depends="clean,set-debug-false,compile" description="Cria jar file">


		<!-- Cria diretório de distribuição -->
		<mkdir dir="${build.dir}/dist" />
		
		<jar destfile="${build.dir}/dist/${ant.project.name}-${version}.jar">
			<manifest>
				<attribute name="Class-Path" value="${ant.project.name}-${version}.jar" />
			</manifest>
			<fileset dir="${build.dir}/classes" />
			<fileset dir="${etc.dir}" includes="**/*.*" />
		</jar>
	</target>
	
	<!-- TESTES DE UNIDADE (JUnit)                                         -->
	<!-- ================================================================= -->
	<!-- test        : executa testes de unidade                           -->
	<!-- test-report : gera relatórios (interrompe Ant em caso de falha    -->	
	<!-- ================================================================= -->

	<target name="test" depends="compile-tests" description="Executa testes (*Test.class) ou classe (-Dclasse=X)">
		<mkdir dir="${test.out.dir}" />
		<property name="classe" value="*Test" />
		<junit printsummary="false" fork="yes"
			errorproperty="test.failed"
			failureproperty="test.failed">
			<sysproperty key="net.sourceforge.cobertura.datafile"
					file="${build.dir}/cobertura.ser" />
			<assertions>
				<enable/>
			</assertions>
			<formatter type="plain" usefile="false" />
			<formatter type="xml" />
			<batchtest todir="${test.out.dir}">
				<fileset dir="${build.dir}/tests">
					<include name="**/${classe}.class" />
					<exclude name="**/Test**All.java" />
				</fileset>
			</batchtest>
			<classpath>
				<path refid="projeto.classpath" />
			</classpath>
		</junit>
	</target>
	
	<target name="test-report" depends="test" description="Gera relatórios de teste (para Ant em caso de erro)"> 		
		<mkdir dir="${test.out.dir}/html"/>         
		<junitreport todir="${test.out.dir}">
			<fileset dir="${test.out.dir}">                    
				<include name="TEST-*.xml"/>       
			</fileset>                                              
			<report todir="${test.out.dir}/html"/>
	    </junitreport>
		
		<!-- Após gerar relatório, interrompe Ant se houve falha -->
		<fail if="test.failed">
			Pelo menos um teste falhou. Veja resultado em ${test.out.dir}/html.
		</fail>		
	</target>
	
	<!-- COBERTURA (verificando a cobertura dos testes de unidade)         -->
	<!-- ================================================================= -->
	<!-- test        : executa testes de unidade                           -->
	<!-- test-report : gera relatórios (interrompe Ant em caso de falha    -->	
	<!-- ================================================================= -->
	
	<taskdef classpathref="cobertura.classpath" resource="tasks.properties"/>
	
	<target name="cobertura-instrument" depends="compile" description="instrumenta código para cobertura">
		<cobertura-instrument todir="${build.dir}/instrumented-classes" datafile="${build.dir}/cobertura.ser">
		    <fileset dir="${build.dir}/classes">
		        <include name="**/*.class"/>
		    </fileset>
		</cobertura-instrument>
	</target>
	
	<target name="set-debug-true">
		<property name="compile.debug" value="true"/>
	</target>
	
	<target name="set-debug-false">
		<property name="compile.debug" value="false"/>
	</target>		
	
	<target name="cobertura" depends="clean, set-debug-true, cobertura-instrument, test" description="gera relatório de cobertura">
	    <cobertura-report datafile="${build.dir}/cobertura.ser" srcdir="${src.dir}" destdir="${build.dir}/cobertura"/>
	</target>
	
	<!-- PROGUARD (comprimindo e protegendo o código gerado)               -->
	<!-- ================================================================= -->
	<!-- test        : executa testes de unidade                           -->
	<!-- test-report : gera relatórios (interrompe Ant em caso de falha    -->	
	<!-- ================================================================= -->
	<taskdef resource="proguard/ant/task.properties"
	         classpath="${proguard.jar}" />
	
	<target name="proguard" depends="dist">
		<proguard configuration="proguard.pro" />
	</target>

</project>