#summary Primeiros contatos com JEE. Copyright (c) 2008 Fábio Nogueira de Lucena

= Roteiro =

== 1. Instale o contêiner JEE ==
Há várias opções, sugiro que faça uso do [http://glassfish.dev.java.net Glassfish]. 

== 2. Verifique a instalação do contêiner ==
Após iniciá-lo (use o comando *asadmin start-domain domain1* para o Glassfish), visite a página http://localhost:8080. Alternativamente, a página de administração do contêiner http://localhost:4848 também pode ser consultada. Neste último caso, a conta de administrador tem como usuário *admin* e senha padrão *adminadmin*. 

== 3. Instalar o adaptador do Glassfish para o Eclipse ==
Para que você possa iniciar, parar e implantar uma aplicação a partir do Eclipse, é necessário um adaptador para o contêiner instalado. Observe que há várias implementações de JEE e, dessa forma, o Eclipse não optou por nenhuma delas, mas uma abordagem que permite que o Eclipse possa ser empregado independentemente da implementação empregada. 

Para instalar o adaptador do Glassfish para o Eclipse vá em Window->Preferences->Server->Installed Runtimes->Add. Verifique se na caixa de diálogo que se abre há o Glassfish como opção. Caso exista, não há o que fazer neste passo, pois a instalação empregada do Eclipse já possui o adaptador. Caso não exista a pasta (opção) Glassfish, clique em _Download additional server adapters_, no canto superior direito. Este processo pode ser relativamente longo, aguarde até que a opção Glassfish apareça. Selecione-a e requisite a instalação. Ao final, será requisitado que o Eclipse seja reiniciado.

== 4. Adicionando o servidor Glassfish ==
Vá até Window->Preferences->Server->Installed Runtimes->Add. Selecione Glassfish e, em particular, *!GlassFish V2 Java EE 5*. Na janela que se abre, forneça o JRE a ser empregado e, em seguida, informe o diretório onde está instalado o Glassfish.

== 5. Compreenda a organização da "aplicação" (estudo de caso) ==
Estes passos fazem uso de uma "aplicação" trivial com o propósito de introduzir elementos fundamentais e permitir que outras questões possam, posteriormente, serem contempladas sem a reapresentação dos passos aqui executados. 

A "aplicação" web oferece ao usuário uma caixa de texto para que uma seqüência de caracteres possa ser fornecida e um botão que, quando acionado, fará com que a seqüência fornecida seja convertida para letras maiúsculas. Esta seqüência resultante é exibida em página própria que destaca a entrada fornecida e o resultado da conversão para maiúsculas. 

Do parágrafo anterior passaremos diretamente, no parágrafo seguinte, para a discussão de uma possível implementação, neste caso, usando EJB. 

A interação com o usuário ocorrerá exclusivamente por meio de duas páginas. A página principal, [http://exemplos.googlecode.com/svn/trunk/scbcd/first/web/WebContent/index.jsp index.jsp], responsável por capturar a seqüência de entrada e a página responsável por exibir o resultado da requisição disparada por meio da página anterior. A página que exibe os resultados é [http://exemplos.googlecode.com/svn/trunk/scbcd/first/web/WebContent/WEB-INF/jsp/saida.jsp saida.jsp]. Ambas são páginas simples. A primeira usa a ação *maiuscula* para tratar a requisição resultante. A segunda simplesmente recupera o valor do parâmetro *entrada* assim como o valor do atributo *resultado* e os exibe. Observe que, até o momento, tudo é exatamente como uma aplicação web convencional, ou seja, que não faz uso de um contêiner JEE para execução. 

Para tratar a requisição gerada pela página inicial tem-se o Servlet [http://exemplos.googlecode.com/svn/trunk/scbcd/first/web/src/servlets/MaiusculaServlet.java  MaiusculaServlet]. Este Servlet recupera o valor da seqüência fornecida como argumento na primeira página (inicial) por maio do parâmetro *entrada*. Em seguida, faz uso da referência *meuBean* para enviar a mensagem _maiuscula(entrada)_. O retorno é registrado como atributo da requisição e denominado *resultado*. Imediatamente a seguir a requisição é redirecionada para a página [http://exemplos.googlecode.com/svn/trunk/scbcd/first/web/WebContent/WEB-INF/jsp/saida.jsp saida.jsp]. A página, conforme comentado anteriormente, simplesmente recupera o valor do parâmetro *entrada* e o valor do atributo *resultado*. Sabemos que este último é, ao consultar [http://exemplos.googlecode.com/svn/trunk/scbcd/first/web/src/servlets/MaiusculaServlet.java  MaiusculaServlet] que se trata da resposta fornecida ao se fazer uso do EJB referenciado por *meuBean*. 

Adicionalmente ao conteúdo do método *doGet*, convém observar a anotação *@EJB*, fornecida para a variável de instância *meuBean*, do tipo [http://exemplos.googlecode.com/svn/trunk/scbcd/first/ejb/ejbModule/utils/StringBeanLocal.java SpringBeanLocal]. Esta interface contém uma única operação, _String maiuscula(String entrada)_ e segue anotada por *@Local*. Isto significa que o acesso a uma implementação desta interface será feita na mesma máquina virtual Java. Por ora, é suficiente destacar que isto assegura o acesso a uma implementação desta interface por _injeção de dependência_. Tal injeção será executada pelo contêiner JEE, neste caso, o Glassfish. Quem será beneficiado por tal injeção? Já sabemos, trata-se do Servlet [http://exemplos.googlecode.com/svn/trunk/scbcd/first/web/src/servlets/MaiusculaServlet.java  MaiusculaServlet]. Observe que, neste Servlet, *meuBean* segue anotado por *@EJB*. Isto é suficiente para que o contêiner JEE empregado injete, ao criar uma instância deste Servlet, uma referência que implementa esta interface. 