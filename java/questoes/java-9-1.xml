<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="questoes.xsl"?>
<Avaliacao xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="questoes.xsd">
    <identificacao>
        <titulo>Linguagem de Programação Java</titulo>
        <copyright>Fábio Nogueira de Lucena</copyright>
        <versao>1.0</versao>
    </identificacao>
    <historico>
        <evento data="2003-10-07">
            <comentario>Atingido o total de 2071 questões!</comentario>
        </evento>
    </historico>
    <questao id="1" objetivo="9.1">
        <introducao>
            <stmt>Collection</stmt>, <stmt>List</stmt>,
            <stmt>Set</stmt>, <stmt>Map</stmt>,   <stmt>SortedSet</stmt>
            e <stmt>SortedMap</stmt> são interfaces.  </introducao>
        <resposta valor="v"/>
    </questao>
    <questao id="2" objetivo="9.1">
        <introducao>
            <stmt>Hashtable</stmt> é uma classe.  </introducao>
        <resposta valor="v"/>
    </questao>
    <questao id="3" objetivo="9.1">
        <introducao>
            <stmt>HashTable</stmt> é uma classe.  </introducao>
        <resposta valor="f">O correto é <stmt>Hashtable</stmt>, com o
            <stmt>t</stmt> minúsculo,   apesar da inconsistência.  </resposta>
    </questao>
    <questao id="4" objetivo="9.1">
        <introducao>
            <stmt>HashMap</stmt> e <stmt>TreeMap</stmt> são
            implementações da interface <stmt>Map</stmt>.  </introducao>
        <resposta valor="v"/>
    </questao>
    <questao id="5" objetivo="9.1">
        <introducao>
            <stmt>ArrayList</stmt> e <stmt>LinkedList</stmt> são
            implementações da interface <stmt>List</stmt>.  </introducao>
        <resposta valor="v"/>
    </questao>
    <questao id="6" objetivo="9.1">
        <introducao>O código abaixo não compila.<java><![CDATA[public class ArraysAsList {
    public static void main(String[] args) {
        List l = Arrays.asList(args);
        l.add("ok");
    }
}]]></java>
        </introducao>
        <resposta valor="f"/>
    </questao>
    <questao id="7" objetivo="9.1">
        <introducao>O código abaixo, quando executado, gera a exceção <stmt>java.lang.UnsupportedOperationException</stmt>.<java><![CDATA[public class ArraysAsList {
    public static void main(String[] args) {
        List l = Arrays.asList(args);
        l.add("ok");
    }
}]]></java>
        </introducao>
        <resposta valor="v"/>
    </questao>
    <questao id="8" objetivo="9.1">
        <introducao>A exceção <stmt>UnsupportedOperationException</stmt>
            é gerada quando    uma lista de tamanho fixo obtida pela
            chamada a <stmt>Arrays.asList()</stmt>   recebe a mensagem
            <stmt>add()</stmt>, por exemplo.  </introducao>
        <resposta valor="v"/>
    </questao>
    <questao id="9" objetivo="9.1">
        <introducao>Uma coleção (<it>collection</it>) é um objeto que
            reúne, agrupa   outros objetos. O agrupamento destes objetos
            em uma unidade é a coleção.  </introducao>
        <resposta valor="v"/>
    </questao>
    <questao id="10" objetivo="9.1">
        <introducao>
            <stmt>SortedMap</stmt> é uma interface que herda de <stmt>Map</stmt>
        </introducao>
        <resposta valor="v"/>
    </questao>
    <questao id="11" objetivo="9.1">
        <introducao>
            <stmt>List</stmt> e <stmt>Set</stmt> são interfaces que
            herdam da interface <stmt>Collection</stmt>.  </introducao>
        <resposta valor="v"/>
    </questao>
    <questao id="12" objetivo="9.1">
        <introducao>
            <stmt>SortedSet</stmt> é uma interface que herda da
            interface <stmt>Set</stmt>.  </introducao>
        <resposta valor="v"/>
    </questao>
    <questao id="13" objetivo="9.1">
        <introducao>
            <stmt>Set</stmt> é um tipo especial de
            <stmt>Collection</stmt>.  </introducao>
        <resposta valor="v"/>
    </questao>
    <questao id="14" objetivo="9.1">
        <introducao>
            <stmt>List</stmt> é um tipo especial de
            <stmt>Collection</stmt>.  </introducao>
        <resposta valor="v"/>
    </questao>
    <questao id="15" objetivo="9.1">
        <introducao>
            <stmt>SortedMap</stmt> é um tipo especial de
            <stmt>Map</stmt>.  </introducao>
        <resposta valor="v"/>
    </questao>
    <questao id="16" objetivo="9.1">
        <introducao>Uma <stmt>Collection</stmt> representa um grupo de
            objetos, que são conhecidos como os elementos desta
            <stmt>Collection</stmt>. Neste caso, interprete uma
            <stmt>Collection</stmt> como um objeto que pode ser
            atribuído a uma referencia para esta interface.  </introducao>
        <resposta valor="v"/>
    </questao>
    <questao id="17" objetivo="9.1">
        <introducao>Um <stmt>Set</stmt> é uma <stmt>Collection</stmt>
            que não contém elementos duplicados.  </introducao>
        <resposta valor="v"/>
    </questao>
    <questao id="18" objetivo="9.1">
        <introducao>Um <stmt>List</stmt> é uma coleção de elementos
            ordenados, também conhecida por seqüencia.  </introducao>
        <resposta valor="v"/>
    </questao>
    <questao id="19" objetivo="9.1">
        <introducao>Um <stmt>Map</stmt> é um objeto que mapeia chaves a
            valores. Estes objetos não podem possuir chaves duplicadas.  </introducao>
        <resposta valor="v"/>
    </questao>
    <questao id="20" objetivo="9.1">
        <introducao>
            <stmt>SortedSet</stmt> e <stmt>SortedMap</stmt> são versões
            ordenadas de <stmt>Set</stmt> e <stmt>Map</stmt>,
            respectivamente.  </introducao>
        <resposta valor="v"/>
    </questao>
    <questao id="21" objetivo="9.1">
        <introducao>Um <stmt>SortedMap</stmt> mantém pares chave/valor
            em ordem ascendente de chave.  </introducao>
        <resposta valor="v"/>
    </questao>
    <questao id="22" objetivo="9.1">
        <introducao>Uma lista de palavras pode ser representada por um
            <stmt>SortedSet</stmt>.  </introducao>
        <resposta valor="v"/>
    </questao>
    <questao id="23" objetivo="9.1">
        <introducao>De forma resumida, listas são listas de coisas ou
            classes que implementam <stmt>List</stmt>.  </introducao>
        <resposta valor="v"/>
    </questao>
    <questao id="24" objetivo="9.1">
        <introducao>De forma resumida, conjuntos são reuniões de coisas
            únicas, ou classes que implementam <stmt>Set</stmt>.  </introducao>
        <resposta valor="v"/>
    </questao>
    <questao id="25" objetivo="9.1">
        <introducao>De forma resumida, mapas são conjuntos de coisas com
            identificadores únicos, ou classes que implementam
            <stmt>Map</stmt>.  </introducao>
        <resposta valor="v"/>
    </questao>
    <questao id="26" objetivo="9.1">
        <introducao>As implementações de <stmt>List</stmt>,
            <stmt>Set</stmt> e <stmt>Map</stmt> podem ser   não
            classificadas e não ordenadas, ordenadas mas não
            classificadas ou ordenadas e classificadas.  </introducao>
        <resposta valor="v"/>
    </questao>
    <questao id="27" objetivo="9.1">
        <introducao>Classes que implementam <stmt>List</stmt>,
            <stmt>Set</stmt> e <stmt>Map</stmt> não podem ser
            classificadas e não ordenadas, pois classificação pressupõe
            uma ordem específica.  </introducao>
        <resposta valor="v"/>
    </questao>
    <questao id="28" objetivo="9.1">
        <introducao>Um objeto <stmt>HashSet</stmt> não é classificado
            nem ordenado.  </introducao>
        <resposta valor="v"/>
    </questao>
    <questao id="29" objetivo="9.1">
        <introducao>Um objeto <stmt>LinkedHashSet</stmt> é um conjunto
            ordenado, mas não classificado.  </introducao>
        <resposta valor="v"/>
    </questao>
    <questao id="30" objetivo="9.1">
        <introducao>Iterar sobre os elementos de uma coleção significa
            obter estes elementos um após o outro.  </introducao>
        <resposta valor="v"/>
    </questao>
    <questao id="31" objetivo="9.1">
        <introducao>Quando uma coleção é ordenada diz-se que se pode
            iterar sobre os elementos desta coleção em uma ordem
            específica, não aleatória.  </introducao>
        <resposta valor="v"/>
    </questao>
    <questao id="32" objetivo="9.1">
        <introducao>Em um <stmt>ArrayList</stmt>, a ordem dos elementos
            é estabelecida pelos índices destes, como em um
            <it>array</it>.  </introducao>
        <resposta valor="v"/>
    </questao>
    <questao id="33" objetivo="9.1">
        <introducao>O código abaixo imprime os números <stmt>1</stmt>,
            <stmt>2</stmt> e <stmt>3</stmt>, nesta ordem, correspondente
            à saída produzida.<java><![CDATA[import java.util.Enumeration;
import java.util.Hashtable;

public class HashtableExemplo {
    public static void main(String[] args) {
        Hashtable numeros = new Hashtable();
        numeros.put("um", new Integer(1));
        numeros.put("dois", new Integer(2));
        numeros.put("tres", new Integer(3));

        for (Enumeration e = numeros.elements(); e.hasMoreElements();) {
            System.out.println(e.nextElement());
        }
    }
}]]></java>
        </introducao>
        <resposta valor="f">Um objeto <stmt>Hashtable</stmt> não é
            ordenado e, naturalmente, não classificado.  </resposta>
    </questao>
    <questao id="34" objetivo="9.1">
        <introducao>Um objeto <stmt>LinkedHashSet</stmt> mantém a ordem
            dos elementos do conjunto conforme a ordem de inserção
            destes.  </introducao>
        <resposta valor="v"/>
    </questao>
    <questao id="35" objetivo="9.1">
        <introducao>A interface <stmt>Enumeration</stmt> declara dois
            únicos métodos: <stmt>hasMoreElements()</stmt> que retorna o
            tipo primitivo <stmt>boolean</stmt> e
            <stmt>nextElement()</stmt>, que retorna um
            <stmt>Object</stmt>.  </introducao>
        <resposta valor="v"/>
    </questao>
    <questao id="36" objetivo="9.1">
        <introducao>A saída produzida pelo programa abaixo é
            <stmt>Capivara</stmt>, <stmt>Anta</stmt> e
            <stmt>Gato</stmt>, nesta ordem.<java><![CDATA[import java.util.Iterator;
import java.util.LinkedHashSet;

public class LinkedHashSetExemplo {
    public static void main(String[] args) {
        LinkedHashSet lhs = new LinkedHashSet();
        lhs.add("Capivara");
        lhs.add("Anta");
        lhs.add("Gato");
		
        for (Iterator i = lhs.iterator(); i.hasNext(); ) {
            System.out.println(i.next());
        }
    }
}]]></java>
        </introducao>
        <resposta valor="v"/>
    </questao>
    <questao id="37" objetivo="9.1">
        <introducao>Uma coleção classificada é uma coleção classificada
            por uma ordem natural. Esta ordem natural é definida pela
            classe dos objetos classificados.  </introducao>
        <resposta valor="v"/>
    </questao>
    <questao id="38" objetivo="9.1">
        <introducao>Há uma distinção entre &quot;classificado&quot; e
            &quot;ordenado&quot;. O que está classificado naturalmente
            está ordenado. Contudo, nem tudo que está ordenado não está
            classificado.  </introducao>
        <resposta valor="v"/>
    </questao>
    <questao id="39" objetivo="9.1">
        <introducao>O código abaixo produz como saída,
            <stmt>Anta</stmt>, <stmt>Capivara</stmt> e
            <stmt>Gato</stmt>, nesta ordem.<java><![CDATA[public class TreeSetExemplo {
    public static void main(String[] args) {
        TreeSet ts = new TreeSet();
        ts.add("Capivara");
        ts.add("Anta");
        ts.add("Gato");
        
        for (Iterator i = ts.iterator(); i.hasNext(); ) {
            System.out.println(i.next());
        }
    }
}]]></java>
        </introducao>
        <resposta valor="v"/>
    </questao>
    <questao id="40" objetivo="9.1">
        <introducao>Um objeto <stmt>TreeSet</stmt> é classificado.  </introducao>
        <resposta valor="v"/>
    </questao>
    <questao id="41" objetivo="9.1">
        <introducao>Um objeto <stmt>List</stmt> enfatiza o emprego de um
            índice. Métodos de <stmt>List</stmt> estão relacionados ao
            emprego de índices.  </introducao>
        <resposta valor="v"/>
    </questao>
    <questao id="42" objetivo="9.1">
        <introducao>Objetos <stmt>List</stmt> permitem elementos
            duplicados, ao contrário de objetos <stmt>Set</stmt>.  </introducao>
        <resposta valor="v"/>
    </questao>
    <questao id="43" objetivo="9.1">
        <introducao>
            <stmt>ArrayList</stmt>, <stmt>Vector</stmt> e
            <stmt>LinkedList</stmt> são tres implementações de
            <stmt>List</stmt>.  </introducao>
        <resposta valor="v"/>
    </questao>
    <questao id="44" objetivo="9.1">
        <introducao>
            <stmt>HashSet</stmt>, <stmt>LinkedHashSet</stmt> e
            <stmt>TreeSet</stmt> são implementações da interface
            <stmt>Set</stmt>.  </introducao>
        <resposta valor="v"/>
    </questao>
    <questao id="45" objetivo="9.1">
        <introducao>
            <stmt>HashMap</stmt>, <stmt>LinkedHashMap</stmt>,
            <stmt>Hashtable</stmt> e <stmt>TreeMap</stmt> são
            implementações da interface <stmt>Map</stmt>.  </introducao>
        <resposta valor="v"/>
    </questao>
    <questao id="46" objetivo="9.1">
        <introducao>A execução do código abaixo deve consumir mais tempo
            na segunda chamada ao método <stmt>insercoes(List)</stmt>.<java><![CDATA[import java.util.*;

public class ListComparacao {
    
    public static void insercoes(List l) {
        for (int i = 0; i < 1000 * 10; i++) {
            l.add(0,String.valueOf(i));
        }
    }
    
    public static void main(String[] args) {
        long inicio = System.currentTimeMillis();
        insercoes(new ArrayList());
        long fim = System.currentTimeMillis();
        System.out.println("ArrayList: " + (fim - inicio));
        
        inicio = fim;
        insercoes(new LinkedList());
        fim = System.currentTimeMillis();
        System.out.println("LinkedList: " + (fim - inicio));               
    }
}]]></java>
        </introducao>
        <resposta valor="f">Inserções e remoções freqüentes em uma lista
            são mais eficientes com um <stmt>LinkedList</stmt>
        </resposta>
    </questao>
    <questao id="47" objetivo="9.1">
        <introducao>O código abaixo não compila.<java><![CDATA[import java.util.*;

public class ListComparacao {
    
    public static void insercoes(List l) {
        for (int i = 0; i < 1000 * 10; i++) {
            l.add(0,String.valueOf(i));
        }
    }
    
    public static void main(String[] args) {
        long inicio = System.currentTimeMillis();
        insercoes(new ArrayList());
        long fim = System.currentTimeMillis();
        System.out.println("ArrayList: " + (fim - inicio));
        
        inicio = fim;
        insercoes(new LinkedList());
        fim = System.currentTimeMillis();
        System.out.println("LinkedList: " + (fim - inicio));               
    }
}]]></java>
        </introducao>
        <resposta valor="f"/>
    </questao>
    <questao id="48" objetivo="9.1">
        <introducao>Um <stmt>HashSet</stmt> é um conjunto não ordenado e
            não classificado. Esta implementação de conjunto
            (<stmt>Set</stmt>) deve ser empregada quando se deseja
            objetos únicos e não há relevancia a ordem de iteração sobre
            estes elementos.  </introducao>
        <resposta valor="v"/>
    </questao>
    <questao id="49" objetivo="9.1">
        <introducao>Várias operações são executadas sobre coleções:
            adicionar objetos;   remover objetos; encontrar um objeto ou
            grupo de objetos; recuperar um objeto   armazenado na
            coleção e iterar sobre uma coleção.  </introducao>
        <resposta valor="v"/>
    </questao>
    <questao id="50" objetivo="9.1">
        <introducao>Um <stmt>HashSet</stmt> não assegura uma ordem
            específica ao iterar sobre os elementos deste conjunto. De
            fato, ao longo do tempo, esta ordem pode até ser alterada.  </introducao>
        <resposta valor="v"/>
    </questao>
    <questao id="51" objetivo="9.1">
        <introducao>Um <stmt>LinkedHashSet</stmt> é um
            <stmt>HashSet</stmt> ordenado, ou seja, com ordem previsível
            de iteração sobre os elementos.  </introducao>
        <resposta valor="v"/>
    </questao>
    <questao id="52" objetivo="9.1">
        <introducao>Um <stmt>LinkedHashMap</stmt>, ao contrário de um
            <stmt>HashMap</stmt>, possui uma ordem de iteração dos seus
            elementos previsível, em geral, a ordem de inserção.  </introducao>
        <resposta valor="v"/>
    </questao>
    <questao id="53" objetivo="9.2">
        <introducao>
            <stmt>Hashtable</stmt> é uma implementação de
            <stmt>Map</stmt>.      </introducao>
        <resposta valor="v"/>
    </questao>
    <questao id="54" objetivo="9.2">
        <introducao>
            <stmt>Vector</stmt> é uma implementação de
            <stmt>List</stmt>.      </introducao>
        <resposta valor="v"/>
    </questao>
    <questao id="55" objetivo="9.2">
        <introducao>Elementos de um objeto <stmt>List</stmt> são
            ordenados pelo índice. Não são classificados.      </introducao>
        <resposta valor="v"/>
    </questao>
    <questao id="56" objetivo="9.2">
        <introducao>Em um <stmt>Map</stmt> deposita-se, através do
            método <stmt>put(Object,Object)</stmt>, pares chave/valor no
            mapa em questão.      </introducao>
        <resposta valor="v"/>
    </questao>
    <questao id="57" objetivo="9.2">
        <introducao>A interface <stmt>Collection</stmt> contém o método
            <stmt>iterator()</stmt>.      </introducao>
        <resposta valor="v"/>
    </questao>
    <questao id="58" objetivo="9.2">
        <introducao>
            <stmt>Iterator</stmt> é uma interface.      </introducao>
        <resposta valor="v"/>
    </questao>
    <questao id="59" objetivo="9.2">
        <introducao>A interface <stmt>Iterator</stmt> contém os métodos
            <stmt>hasNext()</stmt>, <stmt>next()</stmt> e
            <stmt>remove()</stmt>.      </introducao>
        <resposta valor="v"/>
    </questao>
    <questao id="60" objetivo="9.2">
        <introducao>Uma classe que implementa a interface
            <stmt>Map</stmt> deve implementar os métodos <stmt>Object
            get(Object)</stmt> e <stmt>Object put(Object,
            Object)</stmt>.      </introducao>
        <resposta valor="v"/>
    </questao>
    <questao id="61" objetivo="9.2">
        <introducao>A interface <stmt>Collection</stmt> define o método
                <stmt>int size()</stmt>.      </introducao>
        <resposta valor="v"/>
    </questao>
    <questao id="62" objetivo="9.2">
        <introducao>
            <stmt>SortedSet</stmt> e <stmt>SortedMap</stmt> são classes.      </introducao>
        <resposta valor="f">São interfaces.      </resposta>
    </questao>
    <questao id="63" objetivo="9.2">
        <introducao>A classe <stmt>TreeSet</stmt> implementa a interface
            <stmt>SortedSet</stmt>.      </introducao>
        <resposta valor="v"/>
    </questao>
    <questao id="64" objetivo="9.2">
        <introducao>
            <stmt>TreeMap</stmt> implementa a interface
            <stmt>SortedMap</stmt>.      </introducao>
        <resposta valor="v"/>
    </questao>
    <questao id="65" objetivo="9.2">
        <introducao>A classe <stmt>TreeMap</stmt> implementa um
            <stmt>Map</stmt> cujos elementos estão classificados
            conforme a ordenação natural das chaves.      </introducao>
        <resposta valor="v"/>
    </questao>
    <questao id="66" objetivo="9.2">
        <introducao>
            <stmt>TreeMap</stmt> classifica os pares chave/valor pela
            ordem natural dos valores destes pares.      </introducao>
        <resposta valor="f">A ordenação é feita pelas chaves.      </resposta>
    </questao>
    <questao id="67" objetivo="9.2">
        <introducao>
            <stmt>HashMap</stmt> e <stmt>HashSet</stmt> são
            implementações de <stmt>Collection</stmt>.      </introducao>
        <resposta valor="f">
            <stmt>HashMap</stmt> é implementação de <stmt>Map</stmt>.      </resposta>
    </questao>
    <questao id="68" objetivo="9.2">
        <introducao>
            <stmt>HashSet</stmt> e <stmt>ArrayList</stmt> são
            implementações de <stmt>Collection</stmt>.      </introducao>
        <resposta valor="v"/>
    </questao>
    <questao id="69" objetivo="9.2">
        <introducao>
            <stmt>LinkedList</stmt> e <stmt>TreeSet</stmt> são
            implementações de <stmt>Collection</stmt>.      </introducao>
        <resposta valor="v"/>
    </questao>
    <questao id="70" objetivo="9.2">
        <introducao>A classe <stmt>Vector</stmt> implementa a interface
            <stmt>Collection</stmt>.      </introducao>
        <resposta valor="v"/>
    </questao>
    <questao id="71" objetivo="9.2">
        <introducao>A classe <stmt>Hashtable</stmt> implementa a
            interface <stmt>Collection</stmt>.      </introducao>
        <resposta valor="f">Implementa a interface <stmt>Map</stmt>.      </resposta>
    </questao>
    <questao id="72" objetivo="9.2">
        <introducao>Pode-se percorrer qualquer objeto
            <stmt>Collection</stmt> por um <stmt>Iterator</stmt> ou
            <stmt>Enumeration</stmt>.      </introducao>
        <resposta valor="v">A interface <stmt>Collection</stmt> inclui o
            método <stmt>Iterator iterator()</stmt>. A classe
            <stmt>Collections</stmt> contém o método <stmt>Enumeration
            enumeration(Collection)</stmt>.      </resposta>
    </questao>
</Avaliacao>
