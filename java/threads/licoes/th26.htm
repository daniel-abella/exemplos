<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD><TITLE>Introdu&ccedil;&atilde;o &agrave; Ci&ecirc;ncia da Computa&ccedil;&atilde;o (UFG)</TITLE>
<META http-equiv="content-type" content="text/html; charset=iso-8859-1">
<META content="MSHTML 6.00.2800.1170" name=GENERATOR></HEAD>
<BODY>
<TABLE width=600 border=1 cellPadding=0 cellSpacing=0 bordercolor="#000066">
  <TBODY>
  <TR>
    <TD>
      <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
        <TBODY>
        <TR>
              <TD><A href="http://www.inf.ufg.br"><img src="images/icone-icc3.gif" width="600" height="70"></A></TD>
            </TR>
        <TR>
          <TD>
            <CENTER>
            <TABLE cellSpacing=0 cellPadding=0 width="95%" border=0>
              <TBODY>
              <TR>
                        <TD><p><b><font size="3" face="Verdana,Arial,helvetica,sans-serif"><br>
                            </font></b><FONT
                  face=Verdana,Arial,helvetica,sans-serif
                  size=3><b>Concorr&ecirc;ncia com sincroniza&ccedil;&atilde;o</b></FONT></p>
                          <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">Quando 
                            mem&oacute;ria &eacute; compartilhada entre <em>threads</em>, 
                            conforme o exemplo abaixo, o acesso concorrente &agrave; 
                            vari&aacute;vel <font face="Courier New, Courier, mono">saldo</font> 
                            deve ser sincronizado. No c&oacute;digo abaixo, observe 
                            que um bloco de c&oacute;digo foi sincronizado por 
                            meio de <font face="Courier New, Courier, mono">synchronized 
                            (Sincronizar.class)</font>. Isto significa que o bloco 
                            indicado ser&aacute; executado exclusivamente por 
                            um &uacute;nico <em>thread </em>ao adquirir o <em>lock 
                            </em>do objeto fornecido. Conv&eacute;m ressaltar 
                            que um &uacute;nico <em>lock </em>encontra-se dispon&iacute;vel 
                            por objeto. </font></p>
                          <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">Em 
                            conseq&uuml;&ecirc;ncia, o primeiro <em>thread </em>que 
                            atingir o corpo do m&eacute;todo <font face="Courier New, Courier, mono">debito</font> 
                            ir&aacute; obter o <em>lock </em>e impedir que o outro 
                            <em>thread </em>o obtenha. T&atilde;o logo o bloco 
                            de c&oacute;digo <font face="Courier New, Courier, mono">synchronized</font> 
                            seja finalizado pelo <em>thread </em>que adquiriu 
                            o <em>lock</em>, este ser&aacute; liberado e novamente 
                            estar&aacute; dispon&iacute;vel para o objeto em quest&atilde;o. 
                            Isto permite que outro <em>thread</em> ou o mesmo 
                            obtenha o <em>lock </em>deste objeto e, dessa forma, 
                            possa executar o bloco de c&oacute;digo sincronizado. 
                            </font></p>
                          <pre><font size="2" face="Courier New, Courier, mono">public class Sincronizar extends Thread {<br>	private static long saldo = 20000;</font></pre> 
                          <pre> <font size="2" face="Courier New, Courier, mono">  public void debito(long v) {
       synchronized (Sincronizar.class) { saldo = saldo - v; }
   }

   pu</font><font size="2" face="Courier New, Courier, mono">blic void run() {
      for (int i = 0; i &lt; 10000; i++)
          debito(1);
      }<br>   }</font></pre> 
                          <pre><font size="2" face="Courier New, Courier, mono">   public static void main(String[] args) throws Exception {
      Sincronizar thread1 = new Sincronizar();
      Sincronizar thread2 = new Sincronizar();
      thread1.start(); // Inicia thread (deveria debitar 10000)
      thread2.start(); // Inicia thread (deveria debitar 10000)</font></pre> 
                          <pre><font size="2" face="Courier New, Courier, mono">      thread1.join();
      thread2.join();</font></pre> 
                          <pre><font size="2" face="Courier New, Courier, mono">      // Saldo final deveria ser 20000<br>      System.out.println(&quot;Saldo final: &quot; + saldo);
   }<br>}</font></pre> 
                          <HR SIZE=1>
                          <script language="JavaScript" src="rodape.js" type="text/JavaScript"></script>
                          <b><font size="3" face="Verdana,Arial,helvetica,sans-serif"><br>
                          </font></b> 
                          <HR SIZE=1>
                  <BR></TD></TR></TBODY></TABLE></CENTER></TD></TR></TBODY></TABLE></TD></TR>
  <TR>
      <TD bgColor=#000066><IMG height=25 width=1 
  border=0></TD>
    </TR></TBODY></TABLE> 
<BR>
<FONT face="Verdana, Arial, Helvetica, sans-serif"
size=-2>Assinantes podem interromper o recebimento destes informes atrav&eacute;s 
da altera&ccedil;&atilde;o de suas <A
href="https://www.inf.ufg.br">prefer&ecirc;ncias.<br>
</A>Se voc&ecirc; recebe gratuitamente tais informa&ccedil;&otilde;es, ent&atilde;o 
realize o <A
href="http://www.inf.ufg.br">descadastramento</A>.<br>
Para requisitar o recebimento, fa&ccedil;a o <A
href="http://www.inf.ufg.br">cadastramento</A>. Outras quest&otilde;es, envie 
e-mail para <A
href="mailto:icc@inf.ufg.br">icc@inf.ufg.br</A>.<BR>
<BR></FONT>
</BODY> </HTML>