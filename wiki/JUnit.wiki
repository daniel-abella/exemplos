Introdução ao JUnit 4

= Introdução =

Em _Pragmatica Unit Testing: In Java with JUnit_, Andrew Hunt e David Thomas definem teste de unidade como "código escrito por um desenvolvedor que exercita um trecho de código pequeno e de uma área específica da funcionalidade do código que está sendo testado". Eles ainda acrescentam que testes de unidade são desenvolvidos para provar que um trecho de código faz o que o desenvolvedor imagina que deveria fazer.

Nesta breve introdução são fornecidos os passos básicos para uso do JUnit para a confecção de testes de unidade (em Java). 

= Processo =
Não é necessário seguir os passos abaixo. Esta é a abordagem geralmente conhecida por "desenvolvimento baseado em testes". 

 * Escreva um ou mais testes de unidade correspondentes à função a ser desenvolvida
 * Execute os testes de unidade (eles irão falhar, afinal, a funcionalidade ainda não foi implementada)
 * Escreva código que implementa a função e repita o passo anterior até que todos os testes sejam executados satisfatoriamente. 

= Onde obter o JUnit e outras informações =
Em http://www.junit.org você poderá obter a versão mais recente, assim como tutoriais acerca do emprego do JUnit. No momento em que este texto é escrito, a versão mais recente é a versão 4.4.

= Instalar o JUnit =
Obtenha o arquivo contendo o JUnit em http://www.junit.org. No momento, a versão disponível é fornecida no arquivo *junit4.4.zip*. Simplesmente descomprima este arquivo, o que cria o diretório *junit4.4*. Neste diretório criado encontra-se o arquivo *junit-4.4.jar*. Acrescente este arquivo ao _classpath_. Isto pode ser feito de várias formas, por exemplo, pela definição da variável *CLASSPATH* ou toda vez que código contendo referência ao JUnit for compilado ou executado. Neste último caso, tanto o compilador Java (*javac*) quanto a máquina virtual Java (*java*) deverão ser executados com a opção *-cp* incluindo o arquivo *junit-4.4.jar*. 

= Primeiro exemplo =
Abaixo segue uma classe contendo uma única propriedade e três (3) métodos públicos. Para este exemplo didático, apenas o método *adiciona(int valor)* será testado. Conforme a implementação, após a chamada a este método o valor corrente da instância de *Valor* deve ser acrescido do valor fornecido como argumento.

{{{
package basico;

public class Valor {
	private int valor;

	public int getValor() {
		return valor;
	}

	public void setValor(int valor) {
		this.valor = valor;
	}
	
	public void adiciona(int valor) {
		this.valor += valor;
	}
}
}}}

O teste que verifica se o método *adiciona(int valor)* faz o que deveria estar fazendo é fornecido abaixo usando o JUnit. O código é simples, mas cada uma das linhas é comentada em seguida.

{{{
package basico;

import static org.junit.Assert.*;
import org.junit.Test;

public class ValorTest {

	@Test
	public void testAdiciona() {
		Valor v1 = new Valor();
		v1.setValor(1);
		Valor v2 = new Valor();
		v2.setValor(2);
		assertEquals(3,v1.getValor() + v2.getValor());
	}
}
}}}

Há duas sentenças {{{import}}}.